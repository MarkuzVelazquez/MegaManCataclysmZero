<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_met_shoot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_parent</parentName>
  <maskName>spr_met_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
image_index = 0;

PRESS_X = 0;
KEY_LEFT = 0;
KEY_RIGHT = 0;
RELEAS_LEFT = 0;
RELEAS_RIGHT = 0;
KEY_RIGHT = 0;
KEY_LEFT = 0;
KEY_Z = 1;
PRESS_RIGHT = 0;
PRESS_LEFT = 0;

press_right = 0;
press_left = 0;

move_speed =  1.6; //Velociad en la que camina
grav_nor   =  0.3;  //Gravedad normal al saltar
grav_jump  =  1.6;  //Gravedad al soltar una la tecla jump
max_vspeed = 8 //maxima velocidad de bajada(gravedad)
max_jump   =  6; //Maximo salto
max_slope = 11 //Maxima altura de bajadas de rampa
x_speed = 0;
check_vspeed = 1;
jump     =  0;
jumpsp     =  0;
time_jump = 5;
jump_time = time_jump+3;
releas_z = 0;

inmune = 0;

shoot_begin_index = 0;
shoot_end_index = 0;

time_shoot = 40;
shoot_time = time_shoot+1;
shoot = 0;
shooting = 1;

time_index = 0;

shoot_ai = 0;
collision_mega_index = 0;

//Definir sprites
SPR_SHOOT       =  spr_met_shoot;
SPR_WALK        =  spr_met_walk;

//Definir objetos
oSolid = obj_parent_solid;
oSolid_block = obj_parent_block;
oSolid_ramp = obj_parent_ramp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x,y-9,obj_enemy_explocion);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//keyboard(false);

if instance_exists(obj_mega)
{
KEY_RIGHT = 0;
KEY_LEFT = 0;
PRESS_X = 0;
KEY_Z = 1;
PRESS_RIGHT = 0;
PRESS_LEFT = 0;
RELEAS_RIGHT = 0;
RELEAS_LEFT = 0;

if sprite_index != SPR_WALK
{
if obj_mega.x &gt;= x {PRESS_RIGHT = 1;}
if obj_mega.x &lt; x {PRESS_LEFT = 1;}
}


if distance_to_object(obj_mega) &lt;= 120
{
if obj_mega.x &gt;= x &amp;&amp; image_xscale = 1 {KEY_RIGHT = 1;}
if obj_mega.x &lt; x  &amp;&amp; image_xscale = -1{KEY_LEFT = 1;}
if shoot_ai &lt; 100 {shoot_ai ++;}
if shoot_ai == 100
{
shoot_ai = 0;
shoot = 0;
shooting = 0;
}
}

}
//Collision con bala
bullet_collision = instance_place(x,y,obj_bullet_parent);
if bullet_collision &amp;&amp; (bullet_collision).rebote == 0
{
switch(inmune)
{
case 0:
instance_destroy();
break;

case 1:
with(bullet_collision) 
{
event_user(0);
}
break;
}
}

//Movimientos..
//Gravedad
gravity = 0;
if jumpsp == 1 {gravity = grav_nor;}  //Gravedad normal
if releas_z == 1 &amp;&amp; vspeed &lt; 0  {gravity = grav_jump;}  //Gravedad con salto
if vspeed &gt;= max_vspeed {vspeed = max_vspeed;}  //Limita la velocidad vertical

if vspeed &gt; 0 
{
image_speed = 0;
sprite_index = SPR_SHOOT;
image_index = 3;
shoot = 0;
}

//Collision vertical ramp
collision = instance_place(x,y+vspeed,oSolid);
if place_meeting(x,y+vspeed,oSolid)
{
    switch((collision).type)
    {
    case 0:
    //Collision con escalera
        if  y-vspeed &lt; (collision).y &amp;&amp; climb == 0
        {
            if vspeed &lt; 0 {while !place_meeting(x,y-1,oSolid) y--}
            if vspeed &gt; 0
            {
                jump = 0;
                jumpsp = 0;
                check_vspeed = 1;
                
            }
            
                //Arreglo la subidas en desnivel
                if jumpsp == 0 {while  place_meeting(x,y,oSolid) y --;}
                if jumpsp == 1  {while  place_meeting(x,y,oSolid) y ++;}
                //Detener velocidad
                vspeed=0;
                gravity = 0;
                y = floor(y);
        }
    break;

    case 1:
    //Colision con el piso
            if vspeed &lt; 0 {while !place_meeting(x,y-1,oSolid) y--}
            if vspeed &gt; 0
            {
                jump = 0;
                jumpsp = 0;
                check_vspeed = 1;
                
            }
            
                //Arreglo la subidas en desnivel
                if jumpsp == 0 {while  place_meeting(x,y,oSolid) y --;}
                if jumpsp == 1  {while  place_meeting(x,y,oSolid) y ++;}
                //Detener velocidad
                vspeed=0;
                gravity = 0;
                y = floor(y);
    break;
    }
}

//Arreglo de bajadas en desnivel(chequeo)
if jump == 0 &amp;&amp; !place_meeting(x,y+max_slope,oSolid) &amp;&amp; check_vspeed == 1 {check_vspeed = 0; jumpsp = 1;}
//Arreglo de bajadas de desnivel
if jump == 0 &amp;&amp; place_meeting(x,y+max_slope,oSolid) &amp;&amp; check_vspeed == 1
{
while !place_meeting(x,y+1,oSolid) {gravity = 0; vspeed = 0; y ++;}
}

//Movimiento horizontal
x_speed = 0;
//Temporizador de disparo
if shoot_time &lt; time_shoot {shoot_time ++;}

if PRESS_RIGHT &amp;&amp; !KEY_LEFT
{
image_xscale = 1;
}

if PRESS_LEFT &amp;&amp; !KEY_RIGHT
{
image_xscale = -1;
}

if KEY_RIGHT &amp;&amp; !KEY_LEFT
{
if shoot == 0 &amp;&amp; shooting == 1
{
shoot = 1;
shoot_time = 0;
shoot_begin_index = 0;
shoot_end_index = 0;
}
if (sprite_index = SPR_SHOOT &amp;&amp; image_index = 3 &amp;&amp; shoot == 1) || (sprite_index = SPR_WALK)
{
x_speed = move_speed;
}
}

if KEY_LEFT &amp;&amp; !KEY_RIGHT
{
if shoot == 0 &amp;&amp; shooting == 1
{
shoot = 1;
shoot_time = 0;
shoot_begin_index = 0;
shoot_end_index = 0;
}
if (sprite_index = SPR_SHOOT &amp;&amp; image_index = 3 &amp;&amp; shoot == 1) || (sprite_index = SPR_WALK)
{
x_speed = -move_speed;
}
}


//Collision horizontal
if place_meeting(x+x_speed,y,oSolid_block)
{
if (x_speed &lt; 0) {while !place_meeting(x-1,y,oSolid_block) x--}
if (x_speed &gt; 0) {while !place_meeting(x+1,y,oSolid_block) x++}
x_speed = 0; 
}

x += x_speed;

if x_speed &lt;&gt; 0 {inmune = 0; image_speed = 1/7; sprite_index = SPR_WALK; exit;}
image_speed = 0; sprite_index = SPR_SHOOT;


//Animacion
switch(shoot)
{
case 0:
if shoot_end_index == 0
{
shoot_end_index = 1;
time_index = 5;
}

if time_index &gt; 0 {time_index --;}
if time_index == 0
{
    switch(image_index)
    {
    case 3:
    image_index --;
    time_index = 5;
    break;
    
    case 2:
    image_index --;
    time_index = 5;
    break;
    
    case 1:
    image_index --;
    break;
    }
}
break;

case 1:
if shoot_begin_index == 0
{
shoot_begin_index = 1;
time_index = 5;
}
if time_index &gt; 0 {time_index --;}

if time_index == 0
{
    switch(image_index)
    {
    case 0:
    image_index ++;
    time_index = 5;
    break;
    
    case 1:
    image_index ++;
    time_index = 5;
    break;
    
    case 2:
    image_index ++;
    break;
    }
}
break
}

inmune = 0;
if sprite_index = SPR_SHOOT &amp;&amp; image_index == 0 {inmune = 1;}

//Disparo..
xscale = sign(image_xscale);
xScale = image_xscale;
switch(xscale)
{
case -1:
angle = 135;
break;

case 1:
angle = -45;
break;
}

//Disparo
if PRESS_X &amp;&amp; shooting == 0
{
shooting = 1;
for(i=0;i&lt;3;i++)
{
bullet = instance_create(x,y-9,obj_enemy_bullet)
with(bullet) {image_xscale = other.image_xscale; motion_set(other.angle,3);}
angle += 45;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,-13</point>
    <point>10,10</point>
  </PhysicsShapePoints>
</object>
