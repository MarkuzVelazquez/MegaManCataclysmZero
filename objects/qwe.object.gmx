<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mega_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mega_mask1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
colors_init();
Called at game start; initiates all color variables
*/

transparent = noone;
collision = 0;
win = 0;
canmove = 1;
pause = 0;
pause_index = 0;

pixel_time = 0;
time_pixel = 3;

press_rightai = 0;

hurt = 0;

//Outlines
global.frame_0 = make_color_rgb(0,4,0);
global.frame_1 = make_color_rgb(148,0,140); //charging 1
global.frame_2 = make_color_rgb(104,72,252); //charging 2
global.frame_3 = make_color_rgb(156,120,252); //charging 3

//Change color
global.frame_c1 = make_color_rgb(188,188,188);
global.frame_c2 = make_color_rgb(220,40,0);
global.head_c1 = make_color_rgb(5,5,5);
global.head_c2 = make_color_rgb(188,188,188);
global.body_c1 = make_color_rgb(220,40,0);
global.body_c2 = make_color_rgb(5,5,5);

//Proto
global.head_w0 = make_color_rgb(220,40,0);
global.body_w0 = make_color_rgb(188,188,188);
//Stone
global.head_w1 = make_color_rgb(136,20,0);
global.body_w1 = make_color_rgb(248,248,248);
//Gravity
global.head_w2 = make_color_rgb(216,0,204);
global.body_w2 = make_color_rgb(248,248,248);
//Crystal
global.head_w3 = make_color_rgb(0,232,216);
global.body_w3 = make_color_rgb(248,248,248);
//Charge
global.head_w4 = make_color_rgb(248,120,88);
global.body_w4 = make_color_rgb(248,248,248);
//Napalm
global.head_w5 = make_color_rgb(104,72,252);
global.body_w5 = make_color_rgb(255,160,68);
//Wave
global.head_w6 = make_color_rgb(0,120,248);
global.body_w6 = make_color_rgb(248,248,248);
//Star
global.head_w7 = make_color_rgb(228,92,16);
global.body_w7 = make_color_rgb(248,184,0);
//Gyro
global.head_w8 = make_color_rgb(0,168,0);
global.body_w8 = make_color_rgb(248,248,248);
//Arrow
global.head_w9 = make_color_rgb(0,89,254);
global.body_w9 = make_color_rgb(0,217,254);

//Megaman
global.head_w10 = make_color_rgb(0,110,234);
global.body_w10 = make_color_rgb(56,188,255);

//Current
global.frame = global.frame_0;
global.head = global.head_w0;
global.body = global.body_w0;
/*
global.frame_w10 = make_color_rgb(0,4,0);
global.head_w10 = make_color_rgb(0,110,234);
global.body_w10 = make_color_rgb(56,188,255);
*/

play_charge1 = 0;
time_charge2 = 74;
charge2_time = time_charge2 + 1;
frameloop = 0;
alarmchargefx = 0;
chargeloop = 0;
canmove = 1;
charge_color = 0;
charge_repeat = 0;
climbsp = 0;
climb = 1;

///Definir variables locales..
x_speed    =  0;
y_speed    =  0;
jumpsp     =  0;
ins_num    =  0;
xscale     =  0;
shoot      =  0;
press_up = 0;
press_right = 0;
press_left = 0;
press_z    =  0;
press_x    =  1;
press_c    =  0;
releas_z =  0;
releas_x =  0;
releas_c =  0;
check_vspeed = 1;
dis = 0;
view_yh = 0;
view_h = view_hview;
walk_index = 0;
dampenssp = 0;
dampens_index = 1;
slide = 0;
slidesp = 0;
slidemask = 0;
slidejump = 1;
numpol = 0;
shoteffect = noone;
stoopsp = 0;
jump       =  0;
dampens    =  0;
stoop_act = 1;
mask_act = 0;
stooptime_act = 16;
flicker_index = 0;
efeect_act = 1;
efeecttime_act = 16;
pos_new = 0;
shooter = 0;
megabuster_time = 0;
charge = 0;

//Variables cambiables
move_speed =  1.6666666666666666666666666666667; //Velociad en la que camina
grav_nor   =  0.3333333333333333333333333333333;  //Gravedad normal al saltar
grav_jump  =  1.6666666666666666666666666666667;  //Gravedad al soltar una la tecla jump
time_move  =  6;  //Tiempo en el que tardas en caminar(pasito)
move_time  =  time_move; //Contador de tiempo(pasito)
time_dampens = 2;  //Tiempo en que tarda la animacion(acomodo al caer)
dampens_time = time_dampens; //Contador de tiempo(acomodo al caer)
max_jump   =  6; //Maximo salto
time_shoot =  15; //Tiempo de la animacion de disparo
shoot_time =  0; //contador de tiempo(disparo)
move_slidesp = move_speed*2; //Velocidad en la que deslisa
time_slide = 26; //Tiempo en la que deslisa
slide_time = time_slide ++; //Contador de tiempo(deslisa)
max_slope = 11 //Maxima altura de bajadas de rampa
slidelimit = 16; //Limite de alto de huecos que se pueden traspasar
time_flicker = 60; //Tiempo en el quepastañea
flicker_time = 0; //Contador de tiempo(pestañeo)
maskheight = 11; //Distancia en la de deteccion de mascara(alto)
maskwidth = 16 //Distancia en la deteccion de mascara(ancho)
max_vspeed = 8 //maxima velocidad de bajada(gravedad)
maxnumpol = 1; //maximo numero de instacias de polvos
dispol = 5; //Distancia en la que se crea el polvo(altura)

//Definir teclas..
keyboard(true);

//Definir objetos
oSolid = obj_parent_solid;
oSolid_block = obj_parent_block;
oSolid_ramp = obj_parent_ramp;
oBullet  = obj_bullet;
oBullet_charge1  = obj_mega_bullet_charge1;
oBullet_charge2  = obj_mega_bullet_charge2;
oShote = obj_shot_effect;
oShote_charge1 = obj_shot_charge1_effect;
oShote_charge2 = obj_shot_charge2_effect;


//Definir los sprites..
//Normal
SPR_STAND        =  spr_mega_stand;
SPR_WALK         =  spr_mega_walk;
SPR_JUMP         =  spr_mega_jump;
SPR_PIXEL        =  spr_mega_pixel;
SPR_STOOP        =  spr_mega_stoop;
SPR_DAMPENS      =  spr_mega_dampens; 
SPR_SLIDE        =  spr_mega_slide;
SPR_CLIMB        =  spr_mega_climb;
SPR_CLIMBEND     = spr_mega_climbend;

//Shooter
SPR_STANDSHOOT   =  spr_mega_standshoot;
SPR_WALKSHOOT    =  spr_mega_walkshoot;
SPR_JUMPSHOOT    =  spr_mega_jumpshoot;
SPR_STOOPSHOOT   =  spr_mega_stoopshoot;
SPR_DAMPENSSHOOT =  spr_mega_dampensshoot;
SPR_CLIMBSHOOT    =  spr_mega_climbshoot;

//Mask
SPR_MASK1        =  spr_mega_mask1;
SPR_MASK2        =  spr_mega_mask2;
SPR_MASK3        =  spr_mega_mask3;

//Definir audios
SND_JUMP_BEGIN = noone//snd_mega_jump_begin;
SND_JUMP_END   = snd_mega_jump_end2//snd_mega_jump_end;
SND_SLIDE = snd_mega_slide;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.energy == 0
{
grados = 0;
for(i = 0; i &lt; 8; i ++)
{
grados += 45;
explo = instance_create(x,y,obj_explocion); 
with (explo) {motion_set(other.grados,0.7); }
}

grados = 0;
for(i = 0; i &lt; 8; i ++)
{
grados += 45;
explo = instance_create(x,y,obj_explocion); 
with (explo) {motion_set(other.grados,1.4); }
}

}
with(obj_camera) {alarm[1] = room_speed*5;}
//Parar sonidos
audio_stop_sound(Megaman_Charge);
audio_stop_sound(Megaman_Charge_loop);
if win == 0
{
global.energy = 0;
audio_play_sound(sound12,0,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Teporal solo para test
if stooptime_act &lt;= 15 {stooptime_act ++;}
if efeecttime_act &lt;= 15 {efeecttime_act ++;}

if pause == 1 &amp;&amp; pause_index == 0 
{
pause_index = 1;
gravity = 0; 
y_speed = vspeed; 
vspeed = 0; 
sp_speed = image_speed; 
image_speed = 0;
}
if pause == 1 {exit;}
if pause == 0 &amp;&amp; pause_index == 1 {pause_index = 0; vspeed = y_speed; image_speed = sp_speed;}

//Cambio de color
if (charge &gt; 0) 
{
if charge_repeat == 4 {charge_repeat = 0; charge_color ++}
if frameloop &gt; 0 {frameloop --;}
    if frameloop == 0
    {
        switch(charge_color)
        {
        //Cambio de color 1
        case 0:
            switch(global.frame)
            {
            case global.frame_0:
            colors_swap('charging1'); frameloop = 2;
            break;
            case global.frame_1:
            colors_swap('normal'); frameloop = 2;
            if slidesp == 0 {charge_repeat ++;}
            break;
            }
        break;
        //Cambio de color 2
        case 1:
            switch(global.frame)
            {
            case global.frame_0:
            colors_swap('charging2'); frameloop = 2;
            break;
            case global.frame_2:
            colors_swap('normal'); frameloop = 2;
            if slidesp == 0 {charge_repeat ++;}
            break;
            }
        break;
        //Cambio de color 3
        case 2:
            switch(global.frame)
            {
            case global.frame_0:
            colors_swap('charging3'); frameloop = 2;
            break;
            case global.frame_3:
            colors_swap('normal'); frameloop = 2;
            if slidesp == 0 {charge_repeat ++;}
            break
            }
        break;
        //Cambio de color 4
        case 3:
            switch(global.frame)
            {
            case global.frame_0:
            colors_swap('charged1'); frameloop = 2;
            break;
            case global.frame_c1:
            colors_swap('charged2'); frameloop = 2;
            break;
            case global.frame_c2:
            colors_swap('normal'); frameloop = 2;
            break;
            }
        break;
        }
    }
}

//Checar las acciones del teclado..
if canmove = 1
{
keyboard(false);
}

if win = 1 &amp;&amp; jumpsp = 0
{

canmove = 0;
}

if win = 1 &amp;&amp; canmove = 0
{
PRESS_Z = 0;
KEY_DOWN = 0;
KEY_LEFT = 0;
KEY_RIGHT = 0;
RELEAS_LEFT = 0;
RELEAS_RIGHT = 0;
if megabuster_time &lt; 17 {KEY_X = 0;}
dis = x - obj_blockteleport.x;
xscale = sign(image_xscale);
if place_meeting(x+xscale*4,y-!jumpsp*11,oSolid_block){PRESS_Z = 1; KEY_Z = 1;} else {KEY_Z = 0;}
if dis &gt; 1 {KEY_LEFT = 1;}
if dis &lt; -1 {KEY_RIGHT = 1;}
if dis &lt; 1 &amp;&amp; dis &gt; -1
{
instance_create(x,y,obj_teleport2);
instance_destroy();
}
}

//Movimientos..
//Movimiento vertical
//Salto
if jump == 0 &amp;&amp; jumpsp == 0 &amp;&amp; !KEY_DOWN &amp;&amp; slidejump == 1
{
//Salto
if  PRESS_Z 
{
jump = 1;
jumpsp = 1;
releas_z = 0;
//Reproducir audio
audio_play_sound(SND_JUMP_BEGIN,0,0);
vspeed = -max_jump;
}
}
else
{
//Caida
if !KEY_Z {releas_z = 1;}
}

//Escalar..
ladder = collision_line(x,y-1,x,y-35,obj_ladder,0,1);
if !ladder 
{
climb = 0;
climbsp = 0;
}

//Empesar a escalar(subida)
if ladder &amp;&amp; KEY_UP &amp;&amp; !KEY_DOWN &amp;&amp; press_up == 0 &amp;&amp; slidesp == 0
{
press_up = 1;
climb = 1;
climbsp = 1;
with(ladder) {other.x = x+sprite_width/2;} 
}

climbendsp = 0;

//Empesar a escalar(Bajada)
transblock = collision_point(x,y+5,obj_transparent,0,1);
ladderdown = collision_line(x,y+35,x,y,obj_ladder,0,1);
if climb == 0 &amp;&amp; transblock &amp;&amp; ladderdown &amp;&amp; !KEY_UP &amp;&amp; KEY_DOWN &amp;&amp; press_up == 0 &amp;&amp; slidesp == 0 &amp;&amp; jumpsp = 0
{
press_up = 1;
climb = 1;
y += 14;
with(ladderdown) {other.x = x+sprite_width/2;}
climbendsp = 1;
}


if climb == 1 &amp;&amp; PRESS_Z &amp;&amp; !KEY_UP &amp;&amp; !KEY_DOWN {climb = 0; climbsp = 0; jump = 1; jumpsp = 1; press_up = 0;}

//En la escalera
if climb == 1 
{
jump = 1;
jumpsp = 1;
gravity = 0; 
vspeed = 0;
}

//Movimiento en la escalera
if climb == 1 &amp;&amp; KEY_UP &amp;&amp; !KEY_DOWN
{
vspeed = -1;
}

//Movimiento en la escalera
if climb == 1 &amp;&amp; KEY_DOWN &amp;&amp; !KEY_UP
{
vspeed = 1;
}


//Acomodo de piesito
//Reinicia los valores para volver el ciclo
if jumpsp  == 1
{
dampens = 0;
dampens_time = 0;
dampens_index = 0;
}

//Canselacion al moverse
if climb == 1
{
dampens_time = time_dampens+1;
dampenssp = 0;
dampens = 1;
}

ladderend = collision_point(x,y-15,obj_ladder,0,1);
endladder = collision_point(x,y-9,obj_ladder,0,1);
ladder_collision = collision_line(x,y-15,x,y-35,obj_ladder,0,1);
if climb == 1 &amp;&amp; !ladderend &amp;&amp; endladder &amp;&amp; !ladder_collision
{
climbendsp = 1;
}

if climb == 1 &amp;&amp; !endladder &amp;&amp; !ladder_collision
{
while  place_meeting(x,y,oSolid) {y --;}
gravity = 0;
vspeed = 0;
jump = 0;
jumpsp = 0;
check_vspeed = 1;
press_up = 0;
y = floor(y);
}

//Segunda deteccion 
ladder = collision_line(x,y-1,x,y-35,obj_ladder,0,1);
if !ladder &amp;&amp; climb == 1
{
climb = 0; climbsp = 0;
}



//Gravedad
gravity = 0;
if jumpsp == 1 {gravity = grav_nor;}  //Gravedad normal
if releas_z == 1 &amp;&amp; vspeed &lt; 0  {gravity = grav_jump;}  //Gravedad con salto
if climb == 1 {gravity = 0;}
if vspeed &gt;= max_vspeed {vspeed = max_vspeed;}  //Limita la velocidad vertical

//Collision vertical ramp
collision = instance_place(x,y+vspeed,oSolid);
if place_meeting(x,y+vspeed,oSolid)
{
    switch((collision).type)
    {
    case 0:
    //Collision con escalera
        if  y-vspeed &lt; (collision).y &amp;&amp; climb == 0
        {
            if vspeed &lt; 0 {while !place_meeting(x,y-1,oSolid) y--}
            if vspeed &gt; 0
            {
                jump = 0;
                jumpsp = 0;
                climb = 0;
                climbsp = 0;
                check_vspeed = 1;
                
                //Reproducir audio
                if press_up == 0 {audio_play_sound(SND_JUMP_END,0,0);}
                press_up = 0;
            }
            
                //Arreglo la subidas en desnivel
                if jumpsp == 0 {while  place_meeting(x,y,oSolid) y --;}
                if jumpsp == 1  {while  place_meeting(x,y,oSolid) y ++;}
                //Detener velocidad
                vspeed=0;
                gravity = 0;
                y = floor(y);
        }
    break;

    case 1:
    //Colision con el piso
            if vspeed &lt; 0 {while !place_meeting(x,y-1,oSolid) y--}
            if vspeed &gt; 0
            {
                jump = 0;
                jumpsp = 0;
                climb = 0;
                climsp = 0;
                check_vspeed = 1;
                //Reproducir audio
                if press_up == 0 {audio_play_sound(SND_JUMP_END,0,0);}
                press_up = 0;
            }
            
                //Arreglo la subidas en desnivel
                if jumpsp == 0 {while  place_meeting(x,y,oSolid) y --;}
                if jumpsp == 1  {while  place_meeting(x,y,oSolid) y ++;}
                //Detener velocidad
                vspeed=0;
                gravity = 0;
                y = floor(y);
    break;
    }
}

//Arreglo de bajadas en desnivel(chequeo)
if climb == 0
{
if jump == 0 &amp;&amp; !place_meeting(x,y+max_slope,oSolid) &amp;&amp; check_vspeed == 1 {check_vspeed = 0; jumpsp = 1;}
//Arreglo de bajadas de desnivel
if jump == 0 &amp;&amp; place_meeting(x,y+max_slope,oSolid) &amp;&amp; check_vspeed == 1
{
while !place_meeting(x,y+1,oSolid) {gravity = 0; vspeed = 0; y ++;}
}
}

//Movimiento horizontal
x_speed = 0; hspeed = 0;

//Movimiento por pixel
//Izquierda
if !KEY_RIGHT &amp;&amp; press_right == 1 { press_right = 0;}
if KEY_RIGHT &amp;&amp; press_right == 0
{
    press_right = 1;
    //Da el pasito
    if slidesp == 0
    {
        move_time = 0; 
        if image_xscale ==  1  {x_speed = 1;}

    }
}

//Derecha
if !KEY_LEFT &amp;&amp; press_left == 1 { press_left = 0;}
if KEY_LEFT &amp;&amp; press_left == 0
{
    press_left = 1
    //Da el pasito
    if slidesp == 0
    {
        move_time = 0; 
        if image_xscale ==  -1  {x_speed = -1;}
    }
}

//Contador de animacion move pixel
if move_time &lt; time_move {move_time ++;}


//Reinicia la animacion de caminata
if move_time == time_move &amp;&amp; walk_index == 0 &amp;&amp; climb == 0 {walk_index = 1; image_index = 0;}

//Pasito al soltar teclas
//Izquierda
if RELEAS_RIGHT &amp;&amp; slidesp == 0 &amp;&amp; move_time == time_move
{
move_time = 0;
walk_index = 0;
}

//Derecha
if RELEAS_LEFT &amp;&amp;  slidesp == 0 &amp;&amp; move_time == time_move
{
move_time = 0;
walk_index = 0;
}

if jumpsp = 1 {move_time = time_move;}

pixel = 0;
//Movimiento hacia la derecha
if KEY_RIGHT &amp;&amp; !KEY_LEFT 
{
if pixel_time &lt; time_pixel {pixel_time ++;}
if pixel_time == time_pixel {pixel = 1; pixel_time = 0;}
//Movimiento en el piso(pasito inicial)
if move_time == time_move {x_speed = move_speed+pixel;}
//cansela slide
if image_xscale == -1 {slide_time = time_slide;}

//Gira el spite
switch(climb)
{
case 0:
image_xscale = 1;
break;
case 1:
if  ins_num &lt; 3 &amp;&amp; ins_buller1 &lt; 1 &amp;&amp; ins_buller2 &lt; 1
{
if (PRESS_X) || (RELEAS_X &amp;&amp; megabuster_time &gt; 17) {image_xscale = 1;}
}
break;
}
}

pixel = 0;
//Movimiento hacia la izquierda
if KEY_LEFT  &amp;&amp; !KEY_RIGHT 
{
if pixel_time &lt; time_pixel {pixel_time ++;}
if pixel_time == time_pixel {pixel = 1; pixel_time = 0;}
//Movimiento en el piso(pasito inicial)
if move_time == time_move {x_speed = -move_speed-pixel;}
//Cansela slide
if image_xscale == 1 {slide_time = time_slide;}

//Gira el spite
switch(climb)
{
case 0:
image_xscale = -1;
break;
case 1:
if  ins_num &lt; 3 &amp;&amp; ins_buller1 &lt; 1 &amp;&amp; ins_buller2 &lt; 1
{
if (PRESS_X) || (RELEAS_X &amp;&amp; megabuster_time &gt; 17) {image_xscale = -1;}
}
break;
}
}

xscale = sign(image_xscale);

//Agachado
stoopsp = 0;
if stoop_act == 1 &amp;&amp; jumpsp == 0 &amp;&amp; climb == 0 &amp;&amp; KEY_DOWN &amp;&amp; !KEY_UP
{
stoopsp = 1;
x_speed = 0;
}

//Barrida
//Chequeo de botones DOWN y Z
if climb = 0 &amp;&amp; jumpsp = 0 &amp;&amp; KEY_DOWN &amp;&amp; PRESS_Z &amp;&amp; slidesp == 0 &amp;&amp; !collision_point(x+xscale*maskwidth,y-maskheight,oSolid_block,0,1)
{

slide = 1;
slidesp = 1;
slide_time = 0;
slidemask = 1;
audio_play_sound(SND_SLIDE,0,0);
//Crea polvo
numpol = instance_number(obj_powder);
if numpol &lt; maxnumpol
{
instance_create(x,y-dispol,obj_powder);
}
}

//Activa el salto
slidejump = 1;

//Barrida canselacion
if jumpsp == 1 {slide_time = time_slide;}
//Contador de tiempo para la canselacion
if slide_time &lt; time_slide {slide_time ++;}
if slide = 1 
{
    //Quita la animacion slide
    if !place_meeting(x,y-slidelimit,oSolid)
    {
        if slide_time = time_slide
        {
        slide = 0;
        slidesp = 0;
        slidemask = 0;
                //Animacion pasito
            if x_speed == 0
            {
                dampens = 1;
                dampenssp = 1;
                dampens_time = 0;
                dampens_index = 0;
            }
        }
    }
}

//Cambio de mascaras
if slidemask == 0 || jump == 1
{
    //Cambio de mascara normal
    mask_index = SPR_MASK1;
    if stoopsp == 1 || (climbendsp == 1 &amp;&amp; shoot == 0)
    {
    mask_index = SPR_MASK3;
    }
    
}
if slidemask == 1 &amp;&amp; jumpsp = 0
{
    if place_meeting(x+xscale*5,y-slidelimit,oSolid)
    {
    //desactiva el salto
    slidejump = 0;
    }
   //Cambio de mascara barrida
    if !collision_point(x-xscale*maskwidth,y-maskheight,oSolid_block,0,1) {mask_index = SPR_MASK2;}
    if collision_rectangle(x-sprite_width/2,y+1,x+sprite_width,y-1,oSolid_ramp,0,1) {mask_index = SPR_MASK3;}
}

//Movimiento slide
if slide == 1 &amp;&amp; jumpsp == 0
{ 
move_slide = -move_slidesp;
if image_xscale == 1 {move_slide =  move_slidesp;}
x_speed = move_slide;
}
if slide == 0 {audio_stop_sound(SND_SLIDE);}

//Canselar slide al collisionar
if collision_point(x+xscale*maskwidth,y-maskheight,oSolid_block,0,1)
{
slide_time = time_slide; 
}

//Collision horizontal
if place_meeting(x+x_speed,y,oSolid_block)
{
if (x_speed &lt; 0) {while !place_meeting(x-1,y,oSolid_block) x--}
if (x_speed &gt; 0) {while !place_meeting(x+1,y,oSolid_block) x++}
x_speed = 0; 
}

//Acomodacion al tocar el piso
//Registro de que toco el suelo
if jumpsp  == 0 &amp;&amp; dampens == 0 
{
dampens = 1;
dampenssp = 1;
}

//Canselacion al moverse
if jumpsp == 0 &amp;&amp; x_speed &lt;&gt; 0
{
dampens_time = time_dampens+1;
dampenssp = 0;
dampens = 1;
}

//Contador de animacion
if dampens == 1 &amp;&amp; dampens_time &lt; time_dampens 
{
dampens_time ++;
}
//Termina la animacion
if dampens_time == time_dampens  
{
dampenssp = 0;
if dampens_index == 0 {move_time = 0; walk_index = 0; dampens_index = 1;}
}

//cuando estas escalando, no avanza
if climb == 1 {x_speed = 0;}

x += x_speed;


//Disparo..
//Conteo de balas
ins_num = instance_number(oBullet);
ins_buller1 = instance_number(oBullet_charge1);
ins_buller2 = instance_number(oBullet_charge2);
//Disparo con tecla X
if KEY_X &amp;&amp; press_x == 0
{
press_x = 1;
    if ins_num &lt; 3 &amp;&amp; ins_buller1 &lt; 1 &amp;&amp; ins_buller2 &lt; 1 &amp;&amp; slidesp == 0
    {
        megabuster_time = 0;
        shoot_time =  0;
        shoot  =  1;
        bullet_y = 17;
        if stoopsp == 1 {bullet_y = 12;}
        if efeect_act = 1
        {
        with(shoteffect) {instance_destroy();}
        shoteffect = instance_create(x+xscale*17,y-bullet_y,oShote)
        with(shoteffect) {obj_player = other.id; image_xscale = other.image_xscale;}
        }
        bullet =  instance_create(x+xscale*17,y-bullet_y,oBullet);
        with(bullet) {image_xscale = other.image_xscale;}
    }
}

//Carga de megabuster(temporisador)
if KEY_X &amp;&amp; megabuster_time &lt; 76 &amp;&amp; slidesp == 0 {megabuster_time ++;}

if megabuster_time &gt; 17 {charge = 1;}
if megabuster_time &gt; 65 {charge = 2;}

//Sonidos de carga
if charge == 1 &amp;&amp; play_charge1 == 0 {play_charge1 = 1; audio_play_sound(Megaman_Charge,0,0); charge2_time = 0;}
if press_x = 1 &amp;&amp; charge2_time &lt; time_charge2 {charge2_time ++;}
if charge2_time ==  time_charge2 {charge2_time ++; audio_play_sound(Megaman_Charge_loop,0,1);}

//Megabuster carga 1
if ins_num &lt; 3 &amp;&amp; ins_buller1 &lt; 1 &amp;&amp; ins_buller2 &lt; 1 &amp;&amp; !KEY_X &amp;&amp; shoot == 0 &amp;&amp; press_x == 1 &amp;&amp; slidesp == 0 &amp;&amp; megabuster_time &lt;&gt; 0
{
shoot  =  1;
shoot_time = 0;
bullet_y = 17;
if stoopsp == 1 {bullet_y = 12;}
    //Disparo de carga 1
    switch(charge)
    {
    case 0:
            //Efecto
            if efeect_act = 1
            {
            with(shoteffect) {instance_destroy();}
            shoteffect = instance_create(x+xscale*17,y-bullet_y,oShote)
            with(shoteffect) {obj_player = other.id; image_xscale = other.image_xscale;}
            }
        //Crea la bala
        bullet =  instance_create(x+xscale*17,y-bullet_y,oBullet);
        with(bullet) {image_xscale = other.image_xscale;}
    break;
    
    case 1:
            //Efecto
            if efeect_act = 1
            {
            with(shoteffect) {instance_destroy();}
            shoteffect = instance_create(x+xscale*17,y-bullet_y,oShote_charge1)
            with(shoteffect) {obj_player = other.id; image_xscale = other.image_xscale;}
            }
        //Crea la bala
        bullet =  instance_create(x+xscale*17,y-bullet_y,oBullet_charge1);
        with(bullet) {image_xscale = other.image_xscale;}
    break;
    
    case 2:
            //Efecto
            if efeect_act = 1
            {
            with(shoteffect) {instance_destroy();}
            shoteffect = instance_create(x+xscale*17,y-bullet_y,oShote_charge2)
            with(shoteffect) {obj_player = other.id; image_xscale = other.image_xscale;}
            }
        //Crea la bala
        bullet =  instance_create(x+xscale*17,y-bullet_y,oBullet_charge2);
        with(bullet) {image_xscale = other.image_xscale;}
    break;
    }    
}

if !KEY_X &amp;&amp; slidesp == 0 
{
play_charge1 = 0;

press_x = 0; 
charge2_time = time_charge2 +1; 
charge = 0;
megabuster_time = 0;
//Parar sonidos
audio_stop_sound(Megaman_Charge);
audio_stop_sound(Megaman_Charge_loop);
charge_color = 0;
charge_repeat = 0;
}

//Tiempo de disparo
if shoot_time &lt;  time_shoot {shoot_time ++;}
if shoot_time == time_shoot {shoot = 0;}

//Cuando disparas se detiene(escalera)
if climb == 1 &amp;&amp; shoot == 1 {vspeed = 0;}

//Cambio de sprites..
//Normal
switch(climb)
{
case 0:
    switch(shoot)
    {
    case 0:
        switch(jumpsp) 
        {
        case 0:
        //En el piso
        if move_time &lt; time_move-1                     {image_speed = 0; sprite_index = SPR_PIXEL;}
        if x_speed &lt;&gt; 0 &amp;&amp; move_time == time_move      {image_speed = 1/7; sprite_index = SPR_WALK;} 
        if x_speed == 0 &amp;&amp; move_time &gt;= time_move-1    {image_speed = 0; sprite_index = SPR_STAND;}
        if stoopsp = 1                                 {image_speed = 0; sprite_index = SPR_STOOP;}
        
        if dampenssp = 1                               {image_speed = 0; sprite_index = SPR_DAMPENS;}
        if slidesp = 1                                 {image_speed = 0; sprite_index = SPR_SLIDE;}
        
        break;
                
        case 1:
        //En el aire
        image_index = 0; image_speed = 0; sprite_index = SPR_JUMP;
        break;
        }
    break;

    case 1:
        switch(jumpsp) 
        {
        case 0:
        //En el piso
        if x_speed &lt;&gt; 0 &amp;&amp; move_time == time_move      {image_speed = 1/7;  sprite_index = SPR_WALKSHOOT;}
        if x_speed == 0                                {image_speed = 0; sprite_index = SPR_STANDSHOOT;}
        if stoopsp = 1                                 {image_speed = 0; sprite_index = SPR_STOOPSHOOT;}
        if dampenssp = 1                               {image_speed = 0; sprite_index = SPR_DAMPENSSHOOT;}
        if slidesp = 1                                 {image_speed = 0; sprite_index = SPR_SLIDE;}
        break;
        
        case 1:
        //En el aire
        image_index = 0; image_speed = 0; sprite_index = SPR_JUMPSHOOT;
        break;
        }
    break;
    }
break;

case 1:
    switch(shoot)
    {
    case 0:
    //animacion escalera
    if vspeed = 0 {image_speed = 0; sprite_index = SPR_CLIMB;}
    if vspeed &lt;&gt; 0 {image_speed = 1/7; sprite_index = SPR_CLIMB;}
    if climbendsp == 1 {image_speed = 0; sprite_index = SPR_CLIMBEND;}
    break;
    
    case 1:
    //animacion escalera
    image_speed = 0; sprite_index = SPR_CLIMBSHOOT;
    break
    }
break;
}

//Reinicia los valores(Parpadeo)
if sprite_index != SPR_STAND
{
flicker_index = 0; flicker_time = 0; 
}

//Cambio de animacion(Parpadeo)
if sprite_index == SPR_STAND
{
if flicker_index == 0 {flicker_index = 1; image_index = 0;}
if flicker_time &lt; time_flicker {flicker_time ++;}
    switch(image_index)
    {
    case 0:
    if flicker_time == time_flicker {flicker_time = 55; image_index = 1;}
    break;

    case 1:
    if flicker_time == time_flicker {flicker_time = 50; image_index = 2;}
    break;

    case 2:
    if flicker_time == time_flicker {flicker_time = 0; image_index = 0;}
    break;
    }
}



if charge == 0 colors_swap('normal');

//Destroye la instancia fuera de la view
dis = sprite_height;
view_yh = view_yview+view_h;
if y - dis &gt; view_yh {instance_destroy();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Dibuja las capas de colores
spr_frame = asset_get_index(string(sprite_get_name(sprite_index))+'_frame');
spr_head = asset_get_index(string(sprite_get_name(sprite_index))+'_head');
spr_body = asset_get_index(string(sprite_get_name(sprite_index))+'_body');

draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,0,c_white,1);

draw_sprite_ext(spr_frame,image_index,x,y,image_xscale,image_yscale,0,global.frame,1);
draw_sprite_ext(spr_head,image_index,x,y,image_xscale,image_yscale,0,global.head,1);
draw_sprite_ext(spr_body,image_index,x,y,image_xscale,image_yscale,0,global.body,1);

//Temporal
draw_set_color(c_white)
if mask_act == 1
{
draw_sprite_ext(mask_index,-1,x,y,image_xscale,image_yscale,image_angle,image_blend,0.5);
}

if stooptime_act &lt; 15
{
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text(view_xview+16,view_yview+24,"Stoop:" + string(stoop_act));
}

if efeecttime_act &lt; 15
{
draw_set_halign(fa_left);
draw_set_valign(fa_top);
pos_new = 0;
if stooptime_act &lt; 15 {pos_new = 72;}
draw_text(view_xview+16+pos_new,view_yview+24,"efeect:" + string(jump));
}

draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text(view_xview+8,view_yview+24,"Stoop:" + string(x_speed));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="101">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_speed += 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="100">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_speed -= 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="96">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y -= 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mask_act = !mask_act;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>efeect_act = !efeect_act;
efeecttime_act = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stoop_act = !stoop_act;
stooptime_act = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="46">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hurt = !hurt;
if global.energy &gt; 0
{
global.energy = 0;
}
if global.energy == 0
{
instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="34">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_speed = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pause = !pause;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>win = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,24</point>
    <point>50,24</point>
    <point>50,74</point>
    <point>0,74</point>
  </PhysicsShapePoints>
</object>
